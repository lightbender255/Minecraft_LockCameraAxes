# Sets default memory used for gradle commands. Can be overridden by user or command line properties.
# This is required to provide enough memory for the Minecraft de-compilation process.
org.gradle.jvmargs=-Xmx3G
org.gradle.daemon=false

## Environment Properties

# The Minecraft version must agree with the Forge version to get a valid artifact
minecraft_version=1.16.5
# The Minecraft version range can use any release version of Minecraft as bounds.
# Snapshots, pre-releases, and release candidates are not guaranteed to sort properly
# as they do not follow standard versioning conventions.
minecraft_version_range=[1.16.5,1.17)
# The Forge version must agree with the Minecraft version to get a valid artifact
forge_version=36.2.41
# The Forge version range can use any version of Forge as bounds or match the loader version range
forge_version_range=[36,)
# The loader version range can only use the major version of Forge/FML as bounds
loader_version_range=[36,)
# The mapping channel to use for mappings.
# The default set of supported mapping channels are ["official", "snapshot", "snapshot_nodoc", "stable", "stable_nodoc"].
# Additional mapping channels can be registered through the "channelProviders" extension in a Gradle plugin.
#
# | Channel   | Version              |                                                                                |
# |-----------|----------------------|--------------------------------------------------------------------------------|
# | official  | MCVersion            | Official field/method names from Mojang mapping files                          |
# | parchment | YYYY.MM.DD-MCVersion | Open community-sourced parameter names and javadocs layered on top of official |
#
# You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
# See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
#
# Parchment is an unofficial project maintained by ParchmentMC, separate from Minecraft Forge.
# Additional setup is needed to use their mappings, see https://parchmentmc.org/docs/getting-started
mapping_channel=official
# The mapping version to query from the mapping channel.
# This must match the format required by the mapping channel.
mapping_version=1.16.5


## Mod Properties

# The unique mod identifier for the mod. Must be lowercase in English locale. Must fit the regex [a-z][a-z0-9_]{1,63}
# Must match the String constant located in the main mod class annotated with @Mod.
mod_id=lockcameraaxes
# The human-readable display name for the mod.
mod_name=Lock Camera Axes
# The license of the mod. Review your options at https://choosealicense.com/. All Rights Reserved is the default.
mod_license=GPL V3.0
# The mod version. See https://semver.org/
# Given a version number MAJOR.MINOR.PATCH, increment the:
#
# MAJOR version when you make incompatible API changes
# MINOR version when you add functionality in a backward compatible manner
# PATCH version when you make backward compatible bug fixes
#
# 1. Software using Semantic Versioning MUST declare a public API. This API could be declared in the code itself or exist strictly in documentation. However, it is done it SHOULD be precise and comprehensive.
# 2. A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain leading zeroes. X is the major version, Y is the minor version, and Z is the patch version. Each element MUST increase numerically. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.
# 3. Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version.
# 4. Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable.
# 5. Version 1.0.0 defines the public API. The way in which the version number is incremented after this release is dependent on this public API and how it changes.
# 6. Patch version Z (x.y.Z | x > 0) MUST be incremented if only backward compatible bug fixes are introduced. A bug fix is defined as an internal change that fixes incorrect behavior.
# 7. Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backward compatible functionality is introduced to the public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes. Patch version MUST be reset to 0 when minor version is incremented.
# 8. Major version X (X.y.z | X > 0) MUST be incremented if any backward incompatible changes are introduced to the public API. It MAY also include minor and patch level changes. Patch and minor versions MUST be reset to 0 when major version is incremented.
#
# How should I deal with revisions in the 0.y.z initial development phase?
# The simplest thing to do is start your initial development release at 0.1.0 and then increment the minor version for each subsequent release.
#
# How do I know when to release 1.0.0?
# If your software is being used in production, it should probably already be 1.0.0.
# If you have a stable API on which users have come to depend, you should be 1.0.0.
# If you're worrying a lot about backward compatibility, you should probably already be 1.0.0.
#
# MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH
mod_version=1.16.5-0.0.1.0

# The group ID for the mod. It is only important when publishing as an artifact to a Maven repository.
# This should match the base package used for the mod sources.
# See https://maven.apache.org/guides/mini/guide-naming-conventions.html
mod_group_id=ca.lightbender255.lockcameraaxes
# The authors of the mod. This is a simple text string that is used for display purposes in the mod list.
mod_authors=lightbender255
# The description of the mod. This is a simple multiline text string that is used for display purposes in the mod list.
mod_description=Allows locking out of individual camera look axes.\n  This mod was inspired by my son trying to play minecraft for the first time. 
